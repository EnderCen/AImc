from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse, Response, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pathlib import Path
import shutil
import subprocess
import os
import json
import requests
import time
import asyncio
from roop.processors.frame.face_swapper import get_face_swapper, clear_face_swapper
import roop.globals
import yaml
import logging

logger = logging.getLogger(__name__)
app = FastAPI(
    title="H·ªá th·ªëng Ho√°n ƒë·ªïi Khu√¥n m·∫∑t v√† Gi·ªçng n√≥i",
    description="""
H·ªá th·ªëng API t√≠ch h·ª£p nhi·ªÅu t√≠nh nƒÉng x·ª≠ l√Ω AI:

- üé≠ Ho√°n ƒë·ªïi khu√¥n m·∫∑t gi·ªØa hai ·∫£nh
- üó£Ô∏è Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i
- üñºÔ∏è T·∫£i ·∫£nh v√† t·ªáp √¢m thanh
- üé¨ T·∫°o video ho·∫°t h√¨nh t·ª´ ·∫£nh v√† √¢m thanh
- üß† Chuy·ªÉn ƒë·ªïi v√† qu·∫£n l√Ω m√¥ h√¨nh AI ƒë·ªông

C√¥ng ngh·ªá s·ª≠ d·ª•ng: vietTTS, Wav2Lip, InsightFace, OpenAI...
""",
    version="1.0.0",
    contact={
        "name": "Nh√≥m ph√°t tri·ªÉn AI",
        "email": "support@example.com"
    }
)

# T√≠ch h·ª£p t√†i li·ªáu OpenAPI t√πy ch·ªânh
def custom_openapi():
    openapi_path = Path(__file__).parent / "openapi.yaml"
    if openapi_path.exists():
        with open(openapi_path, "r") as f:
            return yaml.safe_load(f)
    return app.openapi_schema  # Fallback to default schema if file not found

app.openapi = custom_openapi

UPLOAD_DIR = Path("uploads")
STATIC_DIR = Path("static")
MODELS_DIR = Path("models")
UPLOAD_DIR.mkdir(exist_ok=True)
STATIC_DIR.mkdir(exist_ok=True)
VIDEO_DIR = STATIC_DIR / "Videos"
CONFIG_PATH = Path(__file__).parent / "model_config.json"

# Mount th∆∞ m·ª•c ch·ª©a file tƒ©nh
app.mount("/static", StaticFiles(directory="./static"), name="static")
app.mount("/models", StaticFiles(directory="./models"), name="models")

@app.get("/", response_class=HTMLResponse)
async def root():
    index_path = Path.home() / "Dev/roop/Web/main.html"
    if index_path.exists():
        return HTMLResponse(content=index_path.read_text(), status_code=200)
    return HTMLResponse(content="<h1>Index file not found</h1>", status_code=404)

@app.post("/face_swap/")
async def face_swap(source: UploadFile = File(...), target: UploadFile = File(...)):
    source_path = UPLOAD_DIR / source.filename
    target_path = UPLOAD_DIR / target.filename
    output_path = STATIC_DIR / "output.jpg"
    
    with source_path.open("wb") as buffer:
        shutil.copyfileobj(source.file, buffer)
    with target_path.open("wb") as buffer:
        shutil.copyfileobj(target.file, buffer)
    
    # Ki·ªÉm tra v√† thi·∫øt l·∫≠p model_path n·∫øu c·∫ßn
    if not hasattr(roop.globals, 'model_path') or not roop.globals.model_path or not os.path.exists(roop.globals.model_path):
        roop.globals.model_path = str(Path(__file__).parent / "models" / "inswapper_128.onnx")
        print(f"[FACE_SWAP] Thi·∫øt l·∫≠p model_path m·∫∑c ƒë·ªãnh: {roop.globals.model_path}")
    
    print(f"[FACE_SWAP] Th·ª±c hi·ªán face swap v·ªõi m√¥ h√¨nh: {roop.globals.model_path}")
    command = [
        "python", "run.py",
        "-s", str(source_path),
        "-t", str(target_path),
        "-o", str(output_path),
        "--frame-processor", "face_swapper",
        "--model-path", roop.globals.model_path  # Truy·ªÅn model_path qua tham s·ªë
    ]
    try:
        subprocess.run(command, check=True)
        return JSONResponse(content={"message": "Face swap completed!", "model_used": roop.globals.model_path})
    except subprocess.CalledProcessError as e:
        print(f"[FACE_SWAP] L·ªói khi ch·∫°y l·ªánh face swap: {str(e)}")
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/text_to_speech/")
async def text_to_speech(text: str = Form(...), voice: str = Form(...)):
    output_audio = STATIC_DIR / "output.wav"
    
    # ƒê·∫£m b·∫£o l·ªánh kh·ªõp v·ªõi terminal
    command = [
        "viettts", "synthesis",
        "--text", text,
        "--voice", voice,
        "--output", str(output_audio)
    ]
    
    try:
        print(f"Running command: {' '.join(command)}")
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        print(result.stdout)
        return JSONResponse(content={"output_audio": "/static/output.wav"})
    except subprocess.CalledProcessError as e:
        error_message = f"Command failed with exit code {e.returncode}: {e.stderr}"
        print(error_message)
        return JSONResponse(content={"error": error_message}, status_code=500)
        
@app.post("/animate_image/")
async def animate_image():
    # T·∫°o th∆∞ m·ª•c Videos n·∫øu ch∆∞a t·ªìn t·∫°i
    VIDEO_DIR.mkdir(exist_ok=True)
    
    image_path = STATIC_DIR / "output.jpg"
    audio_path = STATIC_DIR / "output.wav"
    output_video = STATIC_DIR / "output.mp4"
    
    if not image_path.exists() or not audio_path.exists():
        return JSONResponse(content={"error": "Missing input files (image or audio)"}, status_code=400)

    # X√≥a t·∫•t c·∫£ video c≈© tr∆∞·ªõc khi ch·∫°y
    for old_video in STATIC_DIR.glob("*.mp4"):
        os.remove(old_video)

    command = [
        "python", "inference.py",
        "--driven_audio", str(audio_path),
        "--source_image", str(image_path),
        "--still",
        "--preprocess", "full",
        "--cpu",
        "--result_dir", str(STATIC_DIR)
    ]
    
    try:
        subprocess.run(command, check=True)
        
        # L·∫•y video m·ªõi nh·∫•t theo t√™n file
        video_files = sorted(STATIC_DIR.glob("*.mp4"), reverse=True)
        latest_video = video_files[0] if video_files else None
        
        if not latest_video:
            return JSONResponse(content={"error": "No video was generated by inference.py"}, status_code=500)
        
        latest_video.rename(output_video)
        
        # ƒê·∫£m b·∫£o kh√¥ng ghi ƒë√® file c≈© khi t·∫°o output_web.mp4 trong th∆∞ m·ª•c Videos
        output_web_video = VIDEO_DIR / "output_web.mp4"
        count = 1
        while output_web_video.exists():
            output_web_video = VIDEO_DIR / f"output_web_{count}.mp4"
            count += 1
        
        ffmpeg_command = [
            "ffmpeg", "-i", str(output_video),
            "-y", "-vcodec", "libx264", "-acodec", "aac",
            str(output_web_video)
        ]
        subprocess.run(ffmpeg_command, check=True)
        
        return JSONResponse(content={"output_video": f"/static/Videos/{output_web_video.name}"})
    except subprocess.CalledProcessError as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/upload_image")
async def upload_image(image: UploadFile = File(...)):
    try:
        output_path = STATIC_DIR / "output.jpg"
        with output_path.open("wb") as buffer:
            shutil.copyfileobj(image.file, buffer)
        return JSONResponse(content={"message": "T·∫£i ·∫£nh th√†nh c√¥ng"})
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)
        
@app.post("/upload_voice")
async def upload_voice(voice: UploadFile = File(...)):
    try:
        output_path = STATIC_DIR / "output.wav"
        with output_path.open("wb") as buffer:
            shutil.copyfileobj(voice.file, buffer)
        return JSONResponse(content={"message": "T·∫£i gi·ªçng n√≥i th√†nh c√¥ng"})
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/generate_script/")
async def generate_script(
    text: str = Form(...),
    ai_provider: str = Form("gemini"),
    api_key: str = Form(...),
    model_name: str = Form("gemini-1.5-flash")
):
    try:
        # Validate model name
        if ai_provider == "gemini" and not model_name.startswith("gemini-"):
            model_name = "gemini-1.5-flash"
            logger.warning(f"Model name kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: {model_name}")
        
        command = ["python", "chatbox.py", text]
        
        env = os.environ.copy()
        env["AI_PROVIDER"] = ai_provider
        env["API_KEY"] = api_key
        env["MODEL_NAME"] = model_name
        
        logger.info(f"Chu·∫©n b·ªã ch·∫°y l·ªánh: {' '.join(command)}")
        logger.info(f"AI Provider: {ai_provider}, Model: {model_name}")
        
        result = subprocess.run(
            command,
            check=True,
            capture_output=True,
            text=True,
            env=env
        )
        
        # Ki·ªÉm tra output
        if not result.stdout.strip():
            error_msg = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ AI"
            logger.error(error_msg)
            raise HTTPException(
                status_code=500,
                detail=error_msg
            )
            
        logger.info("T·∫°o k·ªãch b·∫£n th√†nh c√¥ng")
        return JSONResponse(content={"script_output": result.stdout})
        
    except subprocess.CalledProcessError as e:
        error_msg = f"L·ªói khi t·∫°o k·ªãch b·∫£n: {e.stderr}"
        logger.error(error_msg)
        raise HTTPException(
            status_code=500,
            detail=error_msg
        )
    except Exception as e:
        error_msg = f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"
        logger.error(error_msg)
        raise HTTPException(
            status_code=500,
            detail=error_msg
        )

@app.post("/change_model/")
async def change_model(model_file: UploadFile = File(...)):
    print(f"[CHANGE_MODEL] Nh·∫≠n y√™u c·∫ßu change_model, t√™n t·ªáp: {model_file.filename}, k√≠ch th∆∞·ªõc: {model_file.size}")
    try:
        if not model_file.filename:
            print("[CHANGE_MODEL] L·ªói: Kh√¥ng c√≥ t·ªáp ƒë∆∞·ª£c g·ª≠i")
            raise HTTPException(status_code=400, detail="Ph·∫£i cung c·∫•p t·ªáp")

        model_dir = Path(__file__).parent / "models"
        model_dir.mkdir(exist_ok=True)

        model_name = Path(model_file.filename).stem
        file_extension = Path(model_file.filename).suffix or '.bin'
        new_model_path = model_dir / model_file.filename

        counter = 1
        while new_model_path.exists():
            new_model_path = model_dir / f"{model_name}_{counter}{file_extension}"
            counter += 1

        print(f"[CHANGE_MODEL] L∆∞u t·ªáp v√†o: {new_model_path}")
        try:
            with new_model_path.open("wb") as buffer:
                content = await model_file.read()
                print(f"[CHANGE_MODEL] K√≠ch th∆∞·ªõc n·ªôi dung t·ªáp: {len(content)} bytes")
                buffer.write(content)
        except Exception as e:
            print(f"[CHANGE_MODEL] L·ªói l∆∞u t·ªáp: {str(e)}")
            raise HTTPException(status_code=500, detail=f"L·ªói khi l∆∞u t·ªáp: {str(e)}")

        print("[CHANGE_MODEL] T·∫£i t·ªáp v√†o face swapper")
        try:
            clear_face_swapper()
            roop.globals.model_path = str(new_model_path)
            get_face_swapper()
            print(f"[CHANGE_MODEL] M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i: {roop.globals.model_path}")
            
            # Ki·ªÉm tra quy·ªÅn ghi file
            config_dir = CONFIG_PATH.parent
            if not os.access(config_dir, os.W_OK):
                print(f"[CHANGE_MODEL] Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c: {config_dir}")
                raise HTTPException(status_code=500, detail=f"Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c: {config_dir}")
            
            # L∆∞u model_path v√†o file c·∫•u h√¨nh
            with CONFIG_PATH.open("w") as f:
                json.dump({"model_path": str(new_model_path)}, f)
            print(f"[CHANGE_MODEL] L∆∞u model_path v√†o config: {new_model_path}")
            if CONFIG_PATH.exists():
                print(f"[CHANGE_MODEL] X√°c nh·∫≠n file config t·ªìn t·∫°i: {CONFIG_PATH}")
            else:
                print(f"[CHANGE_MODEL] L·ªói: File config kh√¥ng ƒë∆∞·ª£c t·∫°o: {CONFIG_PATH}")
        except Exception as e:
            print(f"[CHANGE_MODEL] L·ªói load t·ªáp ho·∫∑c l∆∞u config: {str(e)}")
            if new_model_path.exists():
                os.remove(new_model_path)
            raise HTTPException(status_code=500, detail=f"L·ªói khi load t·ªáp ho·∫∑c l∆∞u config: {str(e)}")

        print("[CHANGE_MODEL] Ho√†n t·∫•t x·ª≠ l√Ω t·ªáp")
        return JSONResponse(content={
            "success": True,
            "model_name": model_name,
            "model_path": str(new_model_path),
            "relative_path": f"models/{new_model_path.name}"
        })

    except HTTPException as e:
        print(f"[CHANGE_MODEL] HTTPException: {str(e)}")
        raise e
    except Exception as e:
        print(f"[CHANGE_MODEL] L·ªói trong change_model: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi x·ª≠ l√Ω t·ªáp: {str(e)}")

@app.get("/models/{model_path:path}")
async def serve_model(model_path: str):
    model_file = Path(__file__).parent / "models" / model_path
    if not model_file.exists():
        print(f"[SERVE_MODEL] T·ªáp kh√¥ng t·ªìn t·∫°i: {model_file}")
        raise HTTPException(status_code=404, detail="Model file not found")
    print(f"[SERVE_MODEL] Ph·ª•c v·ª• t·ªáp: {model_file}")
    return FileResponse(model_file)

@app.post("/activate_model/")
async def activate_model(request: dict):
    try:
        model_path = request.get('model_path')
        if not model_path:
            print("[ACTIVATE_MODEL] L·ªói: Kh√¥ng cung c·∫•p model_path")
            raise HTTPException(status_code=400, detail="Ph·∫£i cung c·∫•p model_path")

        full_path = Path(__file__).parent / "models" / model_path
        if not full_path.exists():
            print(f"[ACTIVATE_MODEL] T·ªáp kh√¥ng t·ªìn t·∫°i: {full_path}")
            raise HTTPException(status_code=404, detail=f"Model file not found at: {full_path}")

        print(f"[ACTIVATE_MODEL] K√≠ch ho·∫°t m√¥ h√¨nh: {full_path}")
        try:
            clear_face_swapper()
            roop.globals.model_path = str(full_path)
            get_face_swapper()
            print(f"[ACTIVATE_MODEL] M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i: {roop.globals.model_path}")
            
            # Ki·ªÉm tra quy·ªÅn ghi file
            config_dir = CONFIG_PATH.parent
            if not os.access(config_dir, os.W_OK):
                print(f"[ACTIVATE_MODEL] Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c: {config_dir}")
                raise HTTPException(status_code=500, detail=f"Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c: {config_dir}")
            
            # L∆∞u model_path v√†o file c·∫•u h√¨nh
            with CONFIG_PATH.open("w") as f:
                json.dump({"model_path": str(full_path)}, f)
            print(f"[ACTIVATE_MODEL] L∆∞u model_path v√†o config: {full_path}")
            if CONFIG_PATH.exists():
                print(f"[ACTIVATE_MODEL] X√°c nh·∫≠n file config t·ªìn t·∫°i: {CONFIG_PATH}")
            else:
                print(f"[ACTIVATE_MODEL] L·ªói: File config kh√¥ng ƒë∆∞·ª£c t·∫°o: {CONFIG_PATH}")
        except Exception as e:
            print(f"[ACTIVATE_MODEL] L·ªói k√≠ch ho·∫°t m√¥ h√¨nh ho·∫∑c l∆∞u config: {str(e)}")
            raise HTTPException(status_code=500, detail=f"L·ªói khi k√≠ch ho·∫°t m√¥ h√¨nh ho·∫∑c l∆∞u config: {str(e)}")

        print("[ACTIVATE_MODEL] K√≠ch ho·∫°t m√¥ h√¨nh th√†nh c√¥ng")
        return JSONResponse(content={
            "success": True,
            "message": "K√≠ch ho·∫°t m√¥ h√¨nh th√†nh c√¥ng",
            "model_path": str(full_path)
        })

    except HTTPException as e:
        print(f"[ACTIVATE_MODEL] HTTPException: {str(e)}")
        raise e
    except Exception as e:
        print(f"[ACTIVATE_MODEL] L·ªói trong activate_model: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi k√≠ch ho·∫°t m√¥ h√¨nh: {str(e)}")
        
@app.post("/delete_model/")
async def delete_model(request: dict):
    try:
        model_path = request.get('model_path')
        if not model_path:
            print("[DELETE_MODEL] L·ªói: Kh√¥ng cung c·∫•p model_path")
            raise HTTPException(status_code=400, detail="Ph·∫£i cung c·∫•p model_path")

        full_path = Path(__file__).parent / "models" / model_path
        if not full_path.exists():
            print(f"[DELETE_MODEL] T·ªáp kh√¥ng t·ªìn t·∫°i: {full_path}")
            raise HTTPException(status_code=404, detail=f"Model file not found at: {full_path}")

        print(f"[DELETE_MODEL] X√≥a m√¥ h√¨nh: {full_path}")
        try:
            # X√≥a file m√¥ h√¨nh
            os.remove(full_path)
            print(f"[DELETE_MODEL] ƒê√£ x√≥a file: {full_path}")

            # Ki·ªÉm tra n·∫øu m√¥ h√¨nh ƒëang ƒë∆∞·ª£c k√≠ch ho·∫°t
            current_model_path = load_model_path()
            if str(full_path) == current_model_path:
                # Thi·∫øt l·∫≠p v·ªÅ m√¥ h√¨nh m·∫∑c ƒë·ªãnh
                default_model_path = str(Path(__file__).parent / "models" / "inswapper_128.onnx")
                roop.globals.model_path = default_model_path
                try:
                    with CONFIG_PATH.open("w") as f:
                        json.dump({"model_path": default_model_path}, f)
                    print(f"[DELETE_MODEL] C·∫≠p nh·∫≠t model_config.json v·ªÅ m·∫∑c ƒë·ªãnh: {default_model_path}")
                except Exception as e:
                    print(f"[DELETE_MODEL] L·ªói l∆∞u config: {str(e)}")
                    raise HTTPException(status_code=500, detail=f"L·ªói khi l∆∞u config: {str(e)}")
                clear_face_swapper()
                get_face_swapper()
                print(f"[DELETE_MODEL] M√¥ h√¨nh m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c t·∫£i: {roop.globals.model_path}")

        except Exception as e:
            print(f"[DELETE_MODEL] L·ªói x√≥a m√¥ h√¨nh: {str(e)}")
            raise HTTPException(status_code=500, detail=f"L·ªói khi x√≥a m√¥ h√¨nh: {str(e)}")

        print("[DELETE_MODEL] X√≥a m√¥ h√¨nh th√†nh c√¥ng")
        return JSONResponse(content={
            "success": True,
            "message": "X√≥a m√¥ h√¨nh th√†nh c√¥ng",
            "model_path": str(full_path)
        })

    except HTTPException as e:
        print(f"[DELETE_MODEL] HTTPException: {str(e)}")
        raise e
    except Exception as e:
        print(f"[DELETE_MODEL] L·ªói trong delete_model: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi x√≥a m√¥ h√¨nh: {str(e)}")

@app.post("/face_swap_ai/")
async def face_swap_ai(source: UploadFile = File(...), target: UploadFile = File(...)):
    # ƒê·ªãnh nghƒ©a th∆∞ m·ª•c l∆∞u tr·ªØ
    source_path = UPLOAD_DIR / source.filename
    target_path = UPLOAD_DIR / target.filename
    images_dir = STATIC_DIR / "Images"
    images_dir.mkdir(exist_ok=True)  # T·∫°o th∆∞ m·ª•c Images n·∫øu ch∆∞a t·ªìn t·∫°i
    
    # T·∫°o t√™n file ƒë·∫ßu ra v·ªõi s·ªë th·ª© t·ª± ƒë·ªÉ tr√°nh ghi ƒë√®
    output_base = "output"
    file_extension = ".jpg"
    output_path = images_dir / f"{output_base}{file_extension}"
    counter = 1
    while output_path.exists():
        output_path = images_dir / f"{output_base}_{counter}{file_extension}"
        counter += 1
    
    # L∆∞u file ngu·ªìn v√† m·ª•c ti√™u
    with source_path.open("wb") as buffer:
        shutil.copyfileobj(source.file, buffer)
    with target_path.open("wb") as buffer:
        shutil.copyfileobj(target.file, buffer)
    
    # Ki·ªÉm tra v√† thi·∫øt l·∫≠p model_path n·∫øu c·∫ßn
    if not hasattr(roop.globals, 'model_path') or not roop.globals.model_path or not os.path.exists(roop.globals.model_path):
        roop.globals.model_path = str(Path(__file__).parent / "models" / "inswapper_128.onnx")
        print(f"[FACE_SWAP_AI] Thi·∫øt l·∫≠p model_path m·∫∑c ƒë·ªãnh: {roop.globals.model_path}")
    
    print(f"[FACE_SWAP_AI] Th·ª±c hi·ªán face swap v·ªõi m√¥ h√¨nh: {roop.globals.model_path}")
    command = [
        "python", "run.py",
        "-s", str(source_path),
        "-t", str(target_path),
        "-o", str(output_path),
        "--frame-processor", "face_swapper",
        "--model-path", roop.globals.model_path
    ]
    
    try:
        subprocess.run(command, check=True)
        return JSONResponse(content={
            "message": "Face swap completed!",
            "model_used": roop.globals.model_path,
            "output_image": f"/static/Images/{output_path.name}"
        })
    except subprocess.CalledProcessError as e:
        print(f"[FACE_SWAP_AI] L·ªói khi ch·∫°y l·ªánh face swap: {str(e)}")
        return JSONResponse(content={"error": str(e)}, status_code=500)
    finally:
        # D·ªçn d·∫πp file t·∫°m
        if source_path.exists():
            os.remove(source_path)
        if target_path.exists():
            os.remove(target_path)

def load_model_path():
    default_model_path = str(Path(__file__).parent / "models" / "inswapper_128.onnx")
    if CONFIG_PATH.exists():
        try:
            with CONFIG_PATH.open("r") as f:
                config = json.load(f)
                model_path = config.get("model_path")
                if model_path and os.path.exists(model_path):
                    print(f"[INIT] Loaded model path from config: {model_path}")
                    return model_path
                else:
                    print(f"[INIT] Invalid model path in config: {model_path}, using default: {default_model_path}")
        except Exception as e:
            print(f"[INIT] Error reading model config: {str(e)}, using default: {default_model_path}")
    else:
        print(f"[INIT] Model config not found at {CONFIG_PATH}, using default: {default_model_path}")
    return default_model_path

# Thi·∫øt l·∫≠p model_path khi kh·ªüi ƒë·ªông
roop.globals.model_path = load_model_path()
print(f"[INIT] Initial model path set: {roop.globals.model_path}")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=55021)	
